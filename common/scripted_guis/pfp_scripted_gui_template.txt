scripted_gui = {
	#PFP Management Window
	pfp_management_gui = {
		window_name = "pfp_management_window"
		context_type = player_context

		#Check if current viewer
		visible = {
			has_country_flag  = pfp_management_window
		}

		triggers = {
			pfp_view_puppets_option_button_click_enabled = {
				is_ai = no
				NOT = { 
					has_country_flag = pfp_view_puppets_window 
				}
				num_subjects > 0
				any_subject_country = {
					has_autonomy_state = autonomy_military_administration
				}
			}
			pfp_state_transfer_option_button_click_enabled = {
				is_ai = no
				NOT = { has_country_flag = pfp_state_transfer_window }
			}
			pfp_all_formable_puppets_option_button_click_enabled = {
				has_country_flag = pfp_option_greyed_out
			}
		}

		effects  = { 
			#PFP Management - Close Button
			pfp_management_close_button_click = {
				clr_country_flag = pfp_management_window 
			}

			#PFP Management - View Puppets Button
			pfp_view_puppets_option_button_click = {
				set_country_flag = pfp_view_puppets_window

				every_subject_country = {
					limit = {
						has_autonomy_state = autonomy_military_administration
					}
					add_to_array = {
						array = ROOT.pfp_view_puppets_gridbox_array
						value = THIS.id
					}
				}
			}

			#PFP Management - State Transfer Button
			pfp_state_transfer_option_button_click = {
				set_country_flag = pfp_state_transfer_window

				set_variable = {
					var = ROOT.pfp_state_transfer_gridbox_count
					value = 0
				}
			}
		}

		dynamic_lists = { }
		properties = { }

		ai_enabled = { always = no }
		ai_test_interval = 290  # The higher, the long it takes the ai to do actions
		ai_test_variance = 0.5
		ai_check = { }
		ai_check_scope = { }
		ai_weights = { }
	}

	#View Puppets Window
	view_puppets_gui = {
		window_name = "pfp_view_puppets_window"
		context_type = player_context

		#Check if current viewer
		visible = {
			ROOT = { has_country_flag  = pfp_view_puppets_window }
		}

		triggers = { }
		effects = { 
			#GUI Close Button Effect
			pfp_view_puppets_close_button_click = {
				ROOT = { 
					clr_country_flag = pfp_view_puppets_window
					clear_array = ROOT.pfp_view_puppets_gridbox_array
				} 
			}

			#GUI Assign Leader Button Effect
			pfp_view_puppets_gridbox_assign_leader_button_click = {
				ROOT = { 
					set_country_flag = pfp_assign_leader_window
					set_variable = { ROOT.overlord_value_var = ROOT }
					set_variable = { ROOT.puppet_value_var = puppet_value }
				}
			}
		}
		
		#Dynamic List with Puppets for Gridbox
		dynamic_lists = {
			pfp_view_puppets_gridbox = {
				array = ROOT.pfp_view_puppets_gridbox_array
				value = puppet_value
				index = puppet_index
				change_scope = yes
				entry_container = pfp_view_puppets_gridbox_entry
			}
		}

		properties = {
			pfp_view_puppets_flag_container = {
				image = "[THIS.GetFlag]"
			}
		}

		ai_enabled = { always = no }

		ai_test_interval = 290  # The higher, the long it takes the ai to do actions
		ai_test_variance = 0.5

		ai_check = { }
		ai_check_scope = { }
		ai_weights = { }
	}

	#Assign Leader Window
	pfp_assign_leader_gui = {
		window_name = "pfp_assign_leader_window"
		context_type = player_context

		visible = {
			ROOT = { 
				has_country_flag = pfp_assign_leader_window
				has_variable = puppet_value_var 
			}
		}

		triggers = {
			pfp_assign_leader_dismiss_button_click_enabled = {
				ROOT = {
					var:puppet_value_var = {
						NOT = {
							has_country_leader = {
								name = "Military Junta"
								ruling_only = yes
							}
						}
					}
				}
			}
			pfp_assign_leader_appoint_button_click_enabled = {
				ROOT = {
					NOT = {
						can_be_country_leader = leader_value
					}

					var:puppet_value_var = {
						has_country_leader = {
							name = "Military Junta"
							ruling_only = yes
						}
					}
				}
			}
		}

		effects = {	
			pfp_assign_leader_dismiss_button_click = {
				ROOT = {
					var:puppet_value_var = {
						every_character = {
							limit = {
								is_country_leader = yes
							}
							remove_country_leader_role = {
								character = THIS
								ideology = marxism
							}
			
							remove_country_leader_role = {
								character = THIS
								ideology = conservatism
							}
			
							remove_country_leader_role = {
								character = THIS
								ideology = centrism
							}
			
							remove_country_leader_role = {
								character = THIS
								ideology = fascism_ideology
							}
			
							set_nationality = {
								character = THIS
								target_country = ROOT
							}
						}
					}
				}
			}

			pfp_assign_leader_close_button_click = {
				ROOT = {
					clr_country_flag = pfp_assign_leader_window
					clear_variable = puppet_value_var
				}
			}

			pfp_assign_leader_appoint_button_click = {
				ROOT = {
					set_nationality = {
						character = leader_value
						target_country = ROOT.puppet_value_var
					}
				}

				add_country_leader_role = {
					character = leader_value
					promote_leader = yes
					country_leader = {
						ideology = marxism
						expire = "1965.1.1.1"
						traits = { }
					}
				}

				add_country_leader_role = {
					character = leader_value
					promote_leader = yes
					country_leader = {
						ideology = conservatism
						expire = "1965.1.1.1"
						traits = { }
					}
				}

				add_country_leader_role = {
					character = leader_value
					promote_leader = yes
					country_leader = {
						ideology = centrism
						expire = "1965.1.1.1"
						traits = { }
					}
				}

				add_country_leader_role = {
					character = leader_value
					promote_leader = yes
					country_leader = {
						ideology = fascism_ideology
						expire = "1965.1.1.1"
						traits = { }
					}
				}

				log = "[?puppet_value_var.[?leader_value].GetTokenKey]"
			}
		}

		dynamic_lists = {
			pfp_assign_leader_gridbox = {
				array = ROOT.army_leaders
				value = leader_value
				index = leader_index
				change_scope = yes
				entry_container = pfp_assign_leader_gridbox_entry
			}
		}		

		properties = {
			pfp_assign_leader_character_image = {
				image = "GFX_portrait_[?leader_value.GetTokenKey]"
			}
		}
	}

	#State Transfer Window
	state_transfer_gui = {
		window_name = "pfp_state_transfer_window"
		context_type = selected_state_context 

		#Check if current viewer
		visible = {
			ROOT = { has_country_flag  = pfp_state_transfer_window }
		}

		triggers = {
			#GUI Select Button Triggers
			pfp_state_transfer_select_button_click_enabled = {
				AND = {
					check_variable = { ROOT.pfp_state_transfer_gridbox_count < 24 }
					NOT = {
						if = {
							is_in_array = { 
								array = ROOT.pfp_state_transfer_gridbox_array 
								value = THIS.id
							}
						}
					}
					OR = {
						THIS = { is_owned_and_controlled_by = ROOT }
						AND = {
							owner = { is_subject_of = ROOT }
							THIS = { is_owned_and_controlled_by = owner }
						}
					}
				}
			}
			#GUI Unselect Button Triggers
			pfp_state_transfer_unselect_button_click_enabled = { 
				if = {
					is_in_array = { 
						array = ROOT.pfp_state_transfer_gridbox_array 
						value = THIS.id 
					} 
				}
			}
			#GUI Transfer Button Triggers
			pfp_state_transfer_transfer_button_click_enabled = {
				OR = {
					AND = {
						owner = { is_ally_with = ROOT }
						owner = { has_autonomy_state = autonomy_military_administration } 
					}
					owner = { original_tag = ROOT }
				}
			}
		}
		effects = {
			#GUI Close Button Effect
			pfp_state_transfer_close_button_click = {
				ROOT = { 
					clr_country_flag = pfp_state_transfer_window 
					clear_array = ROOT.pfp_state_transfer_gridbox_array

					set_variable = {
						var = ROOT.pfp_state_transfer_gridbox_count
						value = 0
					}
				} 
			}
			#GUI Select Button Effect
			pfp_state_transfer_select_button_click = {
				add_to_variable = {
					var = ROOT.pfp_state_transfer_gridbox_count
					value = 1
				}

				add_to_array = {
					array = ROOT.pfp_state_transfer_gridbox_array
					value = THIS.id
				}
			}
			#GUI Unselect Button Effect
			pfp_state_transfer_unselect_button_click = {
				remove_from_array = {
					array = ROOT.pfp_state_transfer_gridbox_array
					value = THIS.id
				}
			}
			#GUI Transfer Button Effect
			pfp_state_transfer_transfer_button_click = {
				for_each_loop = {
					array = ROOT.pfp_state_transfer_gridbox_array
					value = v

					owner = { 
						transfer_state = v
					}
				}

				clear_array = ROOT.pfp_state_transfer_gridbox_array
			}
		}
		#Dynamic List with States for Gridbox
		dynamic_lists = { 
			pfp_state_transfer_gridbox = {
				array = ROOT.pfp_state_transfer_gridbox_array
				value = v
				index = i
				change_scope = yes
				entry_container = pfp_state_transfer_gridbox_entry
			}
		}

		properties = { }

		ai_enabled = { always = no }

		ai_test_interval = 290  # The higher, the long it takes the ai to do actions
		ai_test_variance = 0.5

		ai_check = { }
		ai_check_scope = { }
		ai_weights = { }
	}


}